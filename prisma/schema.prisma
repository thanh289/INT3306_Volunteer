// Defines the database schema for all models in the application.

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    VOLUNTEER
    EVENT_MANAGER
    ADMIN
}

enum EventCategory {
    ENVIRONMENT
    EDUCATION
    HEALTHCARE
    COMMUNITY
}

enum RegistrationStatus {
    PENDING
    APPROVED
    REJECTED
    COMPLETED
}

enum EventStatus {
    PENDING_APPROVAL
    PUBLISHED
    REJECTED
}

enum Gender {
    MALE
    FEMALE
}

enum UserStatus {
    ACTIVE
    LOCKED
}

// API generated is prisma.user
model User {
    id           String     @id @default(auto()) @map("_id") @db.ObjectId
    name         String?
    email        String     @unique
    phone        String? //optional
    address      String?
    dateOfBirth  DateTime?
    gender       Gender?
    passwordHash String
    role         Role       @default(VOLUNTEER)
    status       UserStatus @default(ACTIVE)
    imageUrl     String?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt

    // an user can registry multiple event and have multiple post
    registrations Registration[]
    posts         Post[]

    createdEvents Event[]        @relation("EventCreator")
    notifications Notification[]
}

model Event {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    title         String
    description   String
    location      String
    imageUrl      String?
    startDateTime DateTime
    endDateTime   DateTime
    maxAttendees  Int
    category      EventCategory @default(COMMUNITY)
    status        EventStatus   @default(PENDING_APPROVAL)
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt

    // this event created by manager
    creatorId String @db.ObjectId
    creator   User   @relation("EventCreator", fields: [creatorId], references: [id], onDelete: Cascade)

    // an event can has multiple user and post
    registrations Registration[]
    posts         Post[]
}

model Registration {
    id        String             @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime           @default(now())
    status    RegistrationStatus @default(PENDING)

    // Which user
    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id])

    // Which event
    eventId String @db.ObjectId
    event   Event  @relation(fields: [eventId], references: [id])

    // an user can only registry an event once
    @@unique([userId, eventId])
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    createdAt DateTime @default(now())

    eventId String @db.ObjectId
    event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

    authorId String @db.ObjectId
    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Notification {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    message   String
    href      String? // link to direct when click the notification
    isRead    Boolean  @default(false)
    createdAt DateTime @default(now())

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
